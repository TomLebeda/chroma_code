[ "const" "mutable" ] @type.qualifier
[ "," "." ";" "::" "->" ] @punctuation.delimiter
[ "..." ] @punctuation.special
["(" ")" "[" "]" "{" "}"] @punctuation.bracket
[ "=" "âˆˆ" (operator) ] @operator

(short_function_definition name: (field_expression (identifier) @function .))
(broadcast_call_expression (field_expression (identifier) @function.call .))
(function_definition name: (field_expression (identifier) @function .))
(call_expression (field_expression (identifier) @function.call .))
(short_function_definition name: (identifier) @function)
(broadcast_call_expression (identifier) @function.call)
(macro_definition name: (identifier) @function.macro)
(function_definition name: (identifier) @function)
(macro_identifier (identifier) @function.macro)
(call_expression (identifier) @function.call)
(macro_identifier) @function.macro

(quote_expression ":" @symbol [(identifier) (operator)] @symbol)

(field_expression (identifier) @field .)

((identifier) @function.builtin (#match? @function.builtin "_abstracttype"))
((identifier) @function.builtin (#match? @function.builtin "_apply_iterate"))
((identifier) @function.builtin (#match? @function.builtin "_apply_pure"))
((identifier) @function.builtin (#match? @function.builtin "_call_in_world"))
((identifier) @function.builtin (#match? @function.builtin "_call_in_world_total"))
((identifier) @function.builtin (#match? @function.builtin "_call_latest"))
((identifier) @function.builtin (#match? @function.builtin "_equiv_typedef"))
((identifier) @function.builtin (#match? @function.builtin "_expr"))
((identifier) @function.builtin (#match? @function.builtin "_expr"))
((identifier) @function.builtin (#match? @function.builtin "_primitivetype"))
((identifier) @function.builtin (#match? @function.builtin "_setsuper!"))
((identifier) @function.builtin (#match? @function.builtin "_structtype"))
((identifier) @function.builtin (#match? @function.builtin "_typebody!"))
((identifier) @function.builtin (#match? @function.builtin "_typevar"))
((identifier) @function.builtin (#match? @function.builtin "applicable"))
((identifier) @function.builtin (#match? @function.builtin "apply_type"))
((identifier) @function.builtin (#match? @function.builtin "arrayref"))
((identifier) @function.builtin (#match? @function.builtin "arrayset"))
((identifier) @function.builtin (#match? @function.builtin "arraysize"))
((identifier) @function.builtin (#match? @function.builtin "const_arrayref"))
((identifier) @function.builtin (#match? @function.builtin "const_arrayref"))
((identifier) @function.builtin (#match? @function.builtin "donotdelete"))
((identifier) @function.builtin (#match? @function.builtin "fieldtype"))
((identifier) @function.builtin (#match? @function.builtin "get_binding_type"))
((identifier) @function.builtin (#match? @function.builtin "getfield"))
((identifier) @function.builtin (#match? @function.builtin "ifelse"))
((identifier) @function.builtin (#match? @function.builtin "invoke"))
((identifier) @function.builtin (#match? @function.builtin "isa"))
((identifier) @function.builtin (#match? @function.builtin "isdefined"))
((identifier) @function.builtin (#match? @function.builtin "modifyfield!"))
((identifier) @function.builtin (#match? @function.builtin "nfields"))
((identifier) @function.builtin (#match? @function.builtin "replacefield!"))
((identifier) @function.builtin (#match? @function.builtin "set_binding_type!"))
((identifier) @function.builtin (#match? @function.builtin "setfield!"))
((identifier) @function.builtin (#match? @function.builtin "sizeof"))
((identifier) @function.builtin (#match? @function.builtin "svec"))
((identifier) @function.builtin (#match? @function.builtin "swapfield!"))
((identifier) @function.builtin (#match? @function.builtin "throw"))
((identifier) @function.builtin (#match? @function.builtin "tuple"))
((identifier) @function.builtin (#match? @function.builtin "typeassert"))
((identifier) @function.builtin (#match? @function.builtin "typeof"))

(function_expression . (identifier) @parameter)
(optional_parameter . (identifier) @parameter)
(slurp_parameter (identifier) @parameter)
(parameter_list (identifier) @parameter)

(abstract_definition name: (identifier) @type.definition) @keyword
(primitive_definition name: (identifier) @type.definition) @keyword

((identifier) @type.builtin (#match? @type.builtin "Type"))
((identifier) @type.builtin (#match? @type.builtin "DataType"))
((identifier) @type.builtin (#match? @type.builtin "Any"))
((identifier) @type.builtin (#match? @type.builtin "Union"))
((identifier) @type.builtin (#match? @type.builtin "UnionAll"))
((identifier) @type.builtin (#match? @type.builtin "Tuple"))
((identifier) @type.builtin (#match? @type.builtin "NTuple"))
((identifier) @type.builtin (#match? @type.builtin "NamedTuple"))
((identifier) @type.builtin (#match? @type.builtin "Val"))
((identifier) @type.builtin (#match? @type.builtin "Nothing"))
((identifier) @type.builtin (#match? @type.builtin "Some"))
((identifier) @type.builtin (#match? @type.builtin "Enum"))
((identifier) @type.builtin (#match? @type.builtin "Expr"))
((identifier) @type.builtin (#match? @type.builtin "Symbol"))
((identifier) @type.builtin (#match? @type.builtin "Module"))
((identifier) @type.builtin (#match? @type.builtin "Function"))
((identifier) @type.builtin (#match? @type.builtin "ComposedFunction"))
((identifier) @type.builtin (#match? @type.builtin "Number"))
((identifier) @type.builtin (#match? @type.builtin "Real"))
((identifier) @type.builtin (#match? @type.builtin "AbstractFloat"))
((identifier) @type.builtin (#match? @type.builtin "Integer"))
((identifier) @type.builtin (#match? @type.builtin "Signed"))
((identifier) @type.builtin (#match? @type.builtin "AbstractIrrational"))
((identifier) @type.builtin (#match? @type.builtin "Fix1"))
((identifier) @type.builtin (#match? @type.builtin "Fix2"))
((identifier) @type.builtin (#match? @type.builtin "Missing"))
((identifier) @type.builtin (#match? @type.builtin "Cmd"))
((identifier) @type.builtin (#match? @type.builtin "EnvDict"))
((identifier) @type.builtin (#match? @type.builtin "VersionNumber"))
((identifier) @type.builtin (#match? @type.builtin "ArgumentError"))
((identifier) @type.builtin (#match? @type.builtin "AssertionError"))
((identifier) @type.builtin (#match? @type.builtin "BoundsError"))
((identifier) @type.builtin (#match? @type.builtin "CompositeException"))
((identifier) @type.builtin (#match? @type.builtin "DimensionMismatch"))
((identifier) @type.builtin (#match? @type.builtin "DivideError"))
((identifier) @type.builtin (#match? @type.builtin "DomainError"))
((identifier) @type.builtin (#match? @type.builtin "EOFError"))
((identifier) @type.builtin (#match? @type.builtin "ErrorException"))
((identifier) @type.builtin (#match? @type.builtin "InexactError"))
((identifier) @type.builtin (#match? @type.builtin "InterruptException"))
((identifier) @type.builtin (#match? @type.builtin "KeyError"))
((identifier) @type.builtin (#match? @type.builtin "LoadError"))
((identifier) @type.builtin (#match? @type.builtin "MethodError"))
((identifier) @type.builtin (#match? @type.builtin "OutOfMemoryError"))
((identifier) @type.builtin (#match? @type.builtin "ReadOnlyMemoryError"))
((identifier) @type.builtin (#match? @type.builtin "OverflowError"))
((identifier) @type.builtin (#match? @type.builtin "ProcessFailedException"))
((identifier) @type.builtin (#match? @type.builtin "StackOverflowError"))
((identifier) @type.builtin (#match? @type.builtin "SystemError"))
((identifier) @type.builtin (#match? @type.builtin "TypeError"))
((identifier) @type.builtin (#match? @type.builtin "UndefKeywordError"))
((identifier) @type.builtin (#match? @type.builtin "UndefRefError"))
((identifier) @type.builtin (#match? @type.builtin "UndefVarError"))
((identifier) @type.builtin (#match? @type.builtin "StringIndexError"))
((identifier) @type.builtin (#match? @type.builtin "InitError"))
((identifier) @type.builtin (#match? @type.builtin "ExponentialBackOff"))
((identifier) @type.builtin (#match? @type.builtin "Timer"))
((identifier) @type.builtin (#match? @type.builtin "AsyncCondition"))
((identifier) @type.builtin (#match? @type.builtin "ParseError"))
((identifier) @type.builtin (#match? @type.builtin "QuoteNode"))
((identifier) @type.builtin (#match? @type.builtin "IteratorSize"))
((identifier) @type.builtin (#match? @type.builtin "IteratorEltype"))
((identifier) @type.builtin (#match? @type.builtin "AbstractRange"))
((identifier) @type.builtin (#match? @type.builtin "OrdinalRange"))
((identifier) @type.builtin (#match? @type.builtin "AbstractUnitRange"))
((identifier) @type.builtin (#match? @type.builtin "StepRange"))
((identifier) @type.builtin (#match? @type.builtin "UnitRange"))
((identifier) @type.builtin (#match? @type.builtin "LinRange"))
((identifier) @type.builtin (#match? @type.builtin "AbstractDict"))
((identifier) @type.builtin (#match? @type.builtin "Dict"))
((identifier) @type.builtin (#match? @type.builtin "IdDict"))
((identifier) @type.builtin (#match? @type.builtin "WeakKeyDict"))
((identifier) @type.builtin (#match? @type.builtin "ImmutableDict"))
((identifier) @type.builtin (#match? @type.builtin "AbstractSet"))
((identifier) @type.builtin (#match? @type.builtin "Set"))
((identifier) @type.builtin (#match? @type.builtin "BitSet"))
((identifier) @type.builtin (#match? @type.builtin "Pair"))
((identifier) @type.builtin (#match? @type.builtin "Pairs"))
((identifier) @type.builtin (#match? @type.builtin "OneTo"))
((identifier) @type.builtin (#match? @type.builtin "StepRangeLen"))
((identifier) @type.builtin (#match? @type.builtin "RoundingMode"))
((identifier) @type.builtin (#match? @type.builtin "Float16"))
((identifier) @type.builtin (#match? @type.builtin "Float32"))
((identifier) @type.builtin (#match? @type.builtin "Float64"))
((identifier) @type.builtin (#match? @type.builtin "BigFloat"))
((identifier) @type.builtin (#match? @type.builtin "Bool"))
((identifier) @type.builtin (#match? @type.builtin "Int"))
((identifier) @type.builtin (#match? @type.builtin "Int8"))
((identifier) @type.builtin (#match? @type.builtin "UInt8"))
((identifier) @type.builtin (#match? @type.builtin "Int16"))
((identifier) @type.builtin (#match? @type.builtin "UInt16"))
((identifier) @type.builtin (#match? @type.builtin "Int32"))
((identifier) @type.builtin (#match? @type.builtin "UInt32"))
((identifier) @type.builtin (#match? @type.builtin "Int64"))
((identifier) @type.builtin (#match? @type.builtin "UInt64"))
((identifier) @type.builtin (#match? @type.builtin "Int128"))
((identifier) @type.builtin (#match? @type.builtin "UInt128"))
((identifier) @type.builtin (#match? @type.builtin "BigInt"))
((identifier) @type.builtin (#match? @type.builtin "Complex"))
((identifier) @type.builtin (#match? @type.builtin "Rational"))
((identifier) @type.builtin (#match? @type.builtin "Irrational"))
((identifier) @type.builtin (#match? @type.builtin "AbstractChar"))
((identifier) @type.builtin (#match? @type.builtin "Char"))
((identifier) @type.builtin (#match? @type.builtin "SubString"))
((identifier) @type.builtin (#match? @type.builtin "Regex"))
((identifier) @type.builtin (#match? @type.builtin "SubstitutionString"))
((identifier) @type.builtin (#match? @type.builtin "RegexMatch"))
((identifier) @type.builtin (#match? @type.builtin "AbstractArray"))
((identifier) @type.builtin (#match? @type.builtin "AbstractVector"))
((identifier) @type.builtin (#match? @type.builtin "AbstractMatrix"))
((identifier) @type.builtin (#match? @type.builtin "AbstractVecOrMat"))
((identifier) @type.builtin (#match? @type.builtin "Array"))
((identifier) @type.builtin (#match? @type.builtin "UndefInitializer"))
((identifier) @type.builtin (#match? @type.builtin "Vector"))
((identifier) @type.builtin (#match? @type.builtin "Matrix"))
((identifier) @type.builtin (#match? @type.builtin "VecOrMat"))
((identifier) @type.builtin (#match? @type.builtin "DenseArray"))
((identifier) @type.builtin (#match? @type.builtin "DenseVector"))
((identifier) @type.builtin (#match? @type.builtin "DenseMatrix"))
((identifier) @type.builtin (#match? @type.builtin "DenseVecOrMat"))
((identifier) @type.builtin (#match? @type.builtin "StridedArray"))
((identifier) @type.builtin (#match? @type.builtin "StridedVector"))
((identifier) @type.builtin (#match? @type.builtin "StridedMatrix"))
((identifier) @type.builtin (#match? @type.builtin "StridedVecOrMat"))
((identifier) @type.builtin (#match? @type.builtin "BitArray"))
((identifier) @type.builtin (#match? @type.builtin "Dims"))
((identifier) @type.builtin (#match? @type.builtin "SubArray"))
((identifier) @type.builtin (#match? @type.builtin "Task"))
((identifier) @type.builtin (#match? @type.builtin "Condition"))
((identifier) @type.builtin (#match? @type.builtin "Event"))
((identifier) @type.builtin (#match? @type.builtin "Semaphore"))
((identifier) @type.builtin (#match? @type.builtin "AbstractLniock"))
((identifier) @type.builtin (#match? @type.builtin "ReentrantLock"))
((identifier) @type.builtin (#match? @type.builtin "Channel"))
((identifier) @type.builtin (#match? @type.builtin "Atomic"))
((identifier) @type.builtin (#match? @type.builtin "SpinLock"))
((identifier) @type.builtin (#match? @type.builtin "RawFD"))
((identifier) @type.builtin (#match? @type.builtin "IOStream"))
((identifier) @type.builtin (#match? @type.builtin "IOBuffer"))
((identifier) @type.builtin (#match? @type.builtin "AbstractDisplay"))
((identifier) @type.builtin (#match? @type.builtin "MIME"))
((identifier) @type.builtin (#match? @type.builtin "TextDisplay"))
((identifier) @type.builtin (#match? @type.builtin "PartialQuickSort"))
((identifier) @type.builtin (#match? @type.builtin "Ordering"))
((identifier) @type.builtin (#match? @type.builtin "ReverseOrdering"))
((identifier) @type.builtin (#match? @type.builtin "By"))
((identifier) @type.builtin (#match? @type.builtin "Lt"))
((identifier) @type.builtin (#match? @type.builtin "Perm"))
((identifier) @type.builtin (#match? @type.builtin "Stateful"))
((identifier) @type.builtin (#match? @type.builtin "CFunction"))
((identifier) @type.builtin (#match? @type.builtin "Ptr"))
((identifier) @type.builtin (#match? @type.builtin "Ref"))
((identifier) @type.builtin (#match? @type.builtin "Cchar"))
((identifier) @type.builtin (#match? @type.builtin "Cuchar"))
((identifier) @type.builtin (#match? @type.builtin "Cshort"))
((identifier) @type.builtin (#match? @type.builtin "Cstring"))
((identifier) @type.builtin (#match? @type.builtin "Cushort"))
((identifier) @type.builtin (#match? @type.builtin "Cint"))
((identifier) @type.builtin (#match? @type.builtin "Cuint"))
((identifier) @type.builtin (#match? @type.builtin "Clong"))
((identifier) @type.builtin (#match? @type.builtin "Culong"))
((identifier) @type.builtin (#match? @type.builtin "Clonglong"))
((identifier) @type.builtin (#match? @type.builtin "Culonglong"))
((identifier) @type.builtin (#match? @type.builtin "Cintmax_t"))
((identifier) @type.builtin (#match? @type.builtin "Cuintmax_t"))
((identifier) @type.builtin (#match? @type.builtin "Csize_t"))
((identifier) @type.builtin (#match? @type.builtin "Cssize_t"))
((identifier) @type.builtin (#match? @type.builtin "Cptrdiff_t"))
((identifier) @type.builtin (#match? @type.builtin "Cwchar_t"))
((identifier) @type.builtin (#match? @type.builtin "Cwstring"))
((identifier) @type.builtin (#match? @type.builtin "Cfloat"))
((identifier) @type.builtin (#match? @type.builtin "Cdouble"))
((identifier) @type.builtin (#match? @type.builtin "Tmstruct"))
((identifier) @type.builtin (#match? @type.builtin "StackFrame"))
((identifier) @type.builtin (#match? @type.builtin "StackTrace"))

(type_clause [(identifier) @type (field_expression (identifier) @type .)])
(typed_parameter parameter: (identifier)? @parameter type: (_) @type)
(parametrized_type_expression (_) @type (curly_expression (_) @type))
(short_function_definition return_type: (identifier) @type)
(function_definition return_type: (identifier) @type)
(struct_definition name: (identifier) @type)
(where_clause (curly_expression (_) @type))
(type_parameter_list (identifier) @type)
(typed_expression (identifier) @type .)
(where_clause (identifier) @type)

((identifier) @variable.builtin (#match? @variable.builtin "^begin") (#has-ancestor? @variable.builtin index_expression))
((identifier) @variable.builtin (#match? @variable.builtin "^end") (#has-ancestor? @variable.builtin index_expression))
((identifier) @variable.builtin (#match? @variable.builtin "^begin") (#has-ancestor? @variable.builtin range_expression))
((identifier) @variable.builtin (#match? @variable.builtin "^end") (#has-ancestor? @variable.builtin range_expression))
;
(function_definition ["function" "end"] @keyword.function)
(compound_statement ["begin" "end"] @keyword)
(macro_definition ["macro" "end" @keyword])
(return_statement "return" @keyword.return)
(do_clause ["do" "end"] @keyword.function)
(quote_statement ["quote" "end"] @keyword)
(let_statement ["let" "end"] @keyword)

(ternary_expression ["?" ":"] @conditional.ternary)
(if_statement ["if" "end"] @conditional)
(elseif_clause "elseif" @conditional)
(else_clause "else" @conditional)
(if_clause "if" @conditional)

(try_statement ["try" "end"] @exception)
(finally_clause "finally" @exception)
(catch_clause "catch" @exception)

[ (break_statement) (continue_statement) ] @repeat
(while_statement ["while" "end"] @repeat)
(for_statement ["for" "end"] @repeat)
(for_clause "for" @repeat)

(module_definition ["module" "baremodule" "end"] @include)
(import_statement ["import" "using"] @include)
(export_statement "export" @include)
(import_alias "as" @include)

(adjoint_expression "'" @operator)
(range_expression ":" @operator)

((operator) @keyword.operator (#match? @keyword.operator "isa"))
((operator) @keyword.operator (#match? @keyword.operator "in"))
(where_expression "where" @keyword.operator)
(where_clause "where" @keyword.operator)
(for_binding "in" @keyword.operator)

(boolean_literal) @boolean
(integer_literal) @number
(float_literal) @float

((identifier) @float (#match? @float "NaN"))
((identifier) @float (#match? @float "NaN16"))
((identifier) @float (#match? @float "NaN32"))
((identifier) @float (#match? @float "Inf"))
((identifier) @float (#match? @float "Inf16"))
((identifier) @float (#match? @float "Inf32"))

((identifier) @constant.builtin (#match? @constant.builtin "nothing"))
((identifier) @constant.builtin (#match? @constant.builtin "missing"))

(character_literal) @character
(escape_sequence) @string.escape

(string_literal) @string
(prefixed_string_literal prefix: (identifier) @function.macro) @string

(command_literal) @string.special
(prefixed_command_literal prefix: (identifier) @function.macro) @string.special

((string_literal) @string.documentation . [ (module_definition) (abstract_definition) (struct_definition) (function_definition) (short_function_definition) (assignment) (const_statement) ])

[ (line_comment) (block_comment) ] @comment @spell
(identifier) @variable

[ "global" "local" "macro" "struct" "end" ] @keyword
